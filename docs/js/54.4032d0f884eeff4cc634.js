(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{"3vzR":function(e,n,t){"use strict";t.r(n);var v=t("KHd+"),_=Object(v.a)({},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"markdown"},[t("h2",[e._v("create-api 模块")]),e._v(" "),e._m(0),e._v(" "),e._m(1),e._v(" "),t("h3",[e._v("createAPI(Vue, Component, [events, single])")]),e._v(" "),t("ul",[e._m(2),e._v(" "),e._m(3),e._v(" "),t("li",[t("p",[e._v("示例：")]),e._v(" "),t("p",[e._v("我们先编写一个 Hello.vue 组件：")]),e._v(" "),t("pre",[t("code",{staticClass:"language-html"},[e._v('<template>\n  <div @click="clickHandler">\n    '+e._s(e.content)+"\n    <slot name=\"other\"></slot>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  export default {\n    name: 'hello',\n    props: {\n      content: {\n        type: String,\n        default: 'Hello'\n      }\n    },\n    methods: {\n      clickHandler(e) {\n        this.$emit('click', e)\n      }\n    }\n  }\n<\/script>\n")])]),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6)])]),e._v(" "),t("h3",[e._v("如何在普通 js 文件中或者全局调用")]),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),t("p",[e._v("或者内置的组件，例如 Dialog：")]),e._v(" "),e._m(9),e._v(" "),t("p",[e._v("还有一种思路是通过数据驱动，比如用 vuex 维护一个全局 state，在需要调用该组件时更新状态，然后在 App.vue 里去 watch 这个状态变化来调用该组件。")])])},[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("该模块默认暴露出一个 "),t("code",[e._v("createAPI")]),e._v(" 函数，可以实现以 API 的形式调用自定义组件。并且既可以在 Vue 实例上下文中调用，也可以"),t("a",{attrs:{href:"https://didi.github.io/cube-ui/#/zh-CN/docs/create-api#cube-%E5%A6%82%E4%BD%95%E5%9C%A8%E6%99%AE%E9%80%9Ajs%E6%96%87%E4%BB%B6%E4%B8%AD%E6%88%96%E8%80%85%E5%85%A8%E5%B1%80%E8%B0%83%E7%94%A8-anchor"}},[e._v("在普通 js 文件中调用")]),e._v("。")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[t("strong",[e._v("注：")]),e._v(" 所有通过 "),t("code",[e._v("createAPI")]),e._v(" 实现的通过 API 的形式调用的自定义组件（cube-ui 内置的组件）都需要通过 "),t("code",[e._v("Vue.use")]),e._v(" 注册才可以。")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("li",[t("p",[e._v("参数：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("{Function} Vue")]),e._v(" Vue 函数")]),e._v(" "),t("li",[t("code",[e._v("{Function | Object} Component")]),e._v(" Vue 组件，组件必须有 name")]),e._v(" "),t("li",[t("code",[e._v("{Array} [events]")]),e._v(" 组件实例 emit 的事件名集合")]),e._v(" "),t("li",[t("code",[e._v("{Boolean} [single]")]),e._v(" 是否为单例")])])])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("li",[t("p",[e._v("用法：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("该方法在 Vue 的 prototype 上增加一个名为 "),t("code",[e._v("$create{camelize(Component.name)}")]),e._v(" 的方法，这样就可以在其他组件中直接通过 "),t("code",[e._v("const instance = this.$createAaBb(config, [renderFn, single])")]),e._v(" 这样来实例化组件了，而且这个实例化组件的元素是被附加到 "),t("code",[e._v("body")]),e._v(" 元素下的。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("const instance = this.$createAaBb(config, renderFn, single)")])]),e._v(" "),t("p",[t("strong",[e._v("参数：")])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("参数")]),e._v(" "),t("th",[e._v("说明")]),e._v(" "),t("th",[e._v("类型")]),e._v(" "),t("th",[e._v("默认值")]),e._v(" "),t("th",[e._v("示例")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("config")]),e._v(" "),t("td",[e._v("配置参数，经处理后传给组件")]),e._v(" "),t("td",[e._v("Object")]),e._v(" "),t("td",[e._v("{}")]),e._v(" "),t("td",[e._v("-")])]),e._v(" "),t("tr",[t("td",[e._v("renderFn")]),e._v(" "),t("td",[e._v("可选参数，用于生成子 VNode 节点，一般场景是处理 slot")]),e._v(" "),t("td",[e._v("Function")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("function (createElement) {...}")])]),e._v(" "),t("tr",[t("td",[e._v("single")]),e._v(" "),t("td",[e._v("可选参数，创建的时候决定是否是单例的，优先级更高，如果没有传入 renderFn 的话，single 的值就是第二个参数的值")]),e._v(" "),t("td",[e._v("Boolean")]),e._v(" "),t("td",[e._v("createAPI() 中传入的 single")]),e._v(" "),t("td",[e._v("-")])])])]),e._v(" "),t("p",[t("strong",[e._v("配置参数 "),t("code",[e._v("config")]),e._v("：")])]),e._v(" "),t("p",[e._v("默认所有的值都会当做 props，但是要排除 createAPI 传入的 "),t("code",[e._v("events")]),e._v(" 中的事件（默认会做转换，例如："),t("code",[e._v("events")]),e._v(" 的值为 "),t("code",[e._v("['click']")]),e._v("，那么 "),t("code",[e._v("config")]),e._v(" 中的 "),t("code",[e._v("onClick")]),e._v(" 就是作为 "),t("code",[e._v("click")]),e._v(" 事件的回调函数，而不是作为 props 传递给组件）。")]),e._v(" "),t("p",[e._v("1.8.0 版本后 "),t("code",[e._v("config")]),e._v(" 中可以直接设置 "),t("code",[e._v("$props")]),e._v(" 和 "),t("code",[e._v("$events")]),e._v("，"),t("code",[e._v("$props")]),e._v(" 中的值是"),t("strong",[e._v("响应式")]),e._v("的，自动监控当前实例化上下文（即 "),t("code",[e._v("this.$createXx")]),e._v(" 中的 "),t("code",[e._v("this")]),e._v("）的上对应的属性值：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("参数")]),e._v(" "),t("th",[e._v("说明")]),e._v(" "),t("th",[e._v("类型")]),e._v(" "),t("th",[e._v("默认值")]),e._v(" "),t("th",[e._v("示例")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("$props")]),e._v(" "),t("td",[e._v("传递给组件的 Props")]),e._v(" "),t("td",[e._v("Object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{<br> title: 'title',<br> content: 'my content',<br> open: false<br>}")])]),e._v(" "),t("tr",[t("td",[e._v("$events")]),e._v(" "),t("td",[e._v("组件的 Events 事件回调")]),e._v(" "),t("td",[e._v("Object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{<br> click: 'clickHandler',<br> select: this.selectHandler<br>}")])])])]),e._v(" "),t("p",[t("code",[e._v("$props")]),e._v(" 示例，约定结构 "),t("code",[e._v("{ [key]: [propKey] }")]),e._v("：")]),e._v(" "),t("pre",[t("code",{staticClass:"language-js"},[e._v("{\n  title: 'title',\n  content: 'my content',\n  open: false\n}\n")])]),e._v(" "),t("p",[t("code",[e._v("title")]),e._v("、"),t("code",[e._v("content")]),e._v("、"),t("code",[e._v("open")]),e._v(" 就是传递给组件的 Prop 的 key，而对应 Prop 的值则按照如下规则获取：")]),e._v(" "),t("ol",[t("li",[e._v("如果是非字符串，则直接取配置的 "),t("code",[e._v("propKey")]),e._v(" 作为值")]),e._v(" "),t("li",[e._v("如果是字符串，且配置的 "),t("code",[e._v("propKey")]),e._v(" 不在当前实例上下文属性上，则直接取 "),t("code",[e._v("propKey")]),e._v(" 作为值")]),e._v(" "),t("li",[e._v("是字符串，且在当前实例上下文属性上，那么直接获取当前实例上下文对应的 "),t("code",[e._v("propKey")]),e._v(" 的值，且会监控这个值的变化实时更新到组件实例上")])]),e._v(" "),t("p",[t("code",[e._v("$events")]),e._v(" 示例，约定结构 "),t("code",[e._v("{ [eventName]: [eventValue] }")]),e._v("：")]),e._v(" "),t("pre",[t("code",{staticClass:"language-js"},[e._v("{\n  click: 'clickHandler',\n  select: this.selectHandler\n}\n")])]),e._v(" "),t("p",[t("code",[e._v("click")]),e._v("、"),t("code",[e._v("select")]),e._v(" 就是事件名，而对应的事件回调则按照如下规则获取：")]),e._v(" "),t("ol",[t("li",[e._v("如果 "),t("code",[e._v("eventValue")]),e._v(" 是非字符串，则直接取配置的 "),t("code",[e._v("eventValue")]),e._v(" 作为值")]),e._v(" "),t("li",[e._v("如果 "),t("code",[e._v("eventValue")]),e._v(" 是字符串，则直接获取当前实例上下文对应的 "),t("code",[e._v("eventValue")]),e._v(" 的值")])]),e._v(" "),t("p",[e._v("1.10.0 版本以后 "),t("code",[e._v("config")]),e._v(" 中可以设置 Vue 支持的所有的"),t("a",{attrs:{href:"https://vuejs.org/v2/guide/render-function.html#The-Data-Object-In-Depth"}},[e._v("配置值")]),e._v("，但是必须要加 "),t("code",[e._v("$")]),e._v("，例如：")]),e._v(" "),t("pre",[t("code",{staticClass:"language-js"},[e._v("this.$createAaBb({\n  $attrs: {\n    id: 'id'\n  },\n  $class: {\n    'my-class': true\n  }\n})\n")])]),e._v(" "),t("p",[t("strong",[e._v("返回值 "),t("code",[e._v("instance")]),e._v("：")])]),e._v(" "),t("p",[t("code",[e._v("instance")]),e._v(" 就是组件实例。")]),e._v(" "),t("blockquote",[t("p",[e._v("这个实例会被"),t("strong",[e._v("附加或代理 "),t("code",[e._v("remove")]),e._v(" 方法")])])]),e._v(" "),t("p",[e._v("如果调用了，该实例就会被销毁且会从 "),t("code",[e._v("body")]),e._v(" 下移除。")]),e._v(" "),t("p",[e._v("如果说实例化上下文（即 "),t("code",[e._v("this.$createXx")]),e._v(" 中的 "),t("code",[e._v("this")]),e._v("）销毁的话会自动移除销毁该实例元素。")])])])])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("然后我们再通过 "),t("code",[e._v("createAPI")]),e._v(" 把 Hello.vue 变成一个 API 式调用的组件并调用。")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("pre",[t("code",{staticClass:"language-js"},[e._v("  import Vue from 'vue'\n  import Hello from './Hello.vue'\n\n  // 引入 Style 加载基础样式\n  import {\n    /* eslint-disable no-unused-vars */\n    Style,\n    Dialog,\n    createAPI\n  } from 'cube-ui'\n\n  Vue.use(Dialog)\n\n  // 创建 this.$createHello API\n  createAPI(Vue, Hello, ['click'], true)\n\n  // 初始化 Vue\n  new Vue({\n    el: '#app',\n    render: function (h) {\n      return h('button', {\n        on: {\n          click: this.showHello\n        }\n      }, ['Show Hello'])\n    },\n    methods: {\n      showHello() {\n        // 直接调用\n        // 传入配置对象，默认传入的所有对象全都当做 props 传入组件\n        // 除了在调用 createAPI 的时候传入了 events，这里对应的就是\n        // on{event name} 会被当做事件回调处理\n        const instance = this.$createHello({\n          content: 'My Hello Content',\n          onClick(e) {\n            console.log('Hello component clicked.')\n          }\n        }, /* renderFn */ (createElement) => {\n          return [\n            createElement('p', {\n              slot: 'other'\n            }, 'other content')\n          ]\n        })\n        // 通过 Vue 组件的 $on 也是可以监听的，看使用场景\n        instance.$on('click', (e) => {\n          const $dialog = this.$createDialog({\n            type: 'confirm',\n            content: '点击确定关闭当前实例',\n            icon: 'cubeic-alert'\n          })\n          $dialog.show()\n\n          $dialog.$on('confirm', () => {\n            // 销毁实例\n            instance.remove()\n          }).$on('cancel', () => {\n            console.log('cancel')\n          })\n        })\n      }\n    }\n  })\n")])])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("示例中就是创建了一个需要 API 调用的组件 "),t("code",[e._v("Hello")]),e._v("，然后在其他组件中去使用，重点就是 "),t("code",[e._v("showHello()")]),e._v(" 方法做的事情：调用 "),t("code",[e._v("this.$createHello(config, renderFn)")]),e._v(" 实现组件的实例化。")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("一般当你在 Vue 实例中，你可以直接通过 "),t("code",[e._v("this.$createHello(config, renderFn)")]),e._v(" 调用该组件。而如果在普通 JS 中"),t("code",[e._v("this")]),e._v("不是 Vue 实例，这时就可以通过组件本身的 "),t("code",[e._v("$create")]),e._v(" 来进行实例化了，比如：")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("pre",[t("code",{staticClass:"language-js"},[e._v("import Vue from 'vue'\nimport Hello from './Hello.vue'\n\nimport {\n  createAPI\n} from 'cube-ui'\n\n// 创建 this.$createHello and $Hello.create API\ncreateAPI(Vue, Hello, ['click'], true)\n\nHello.$create(config, renderFn)\n")])])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("pre",[t("code",{staticClass:"language-js"},[e._v("import Vue from 'vue'\nimport { Dialog } from 'cube-ui'\n\nVue.use(Dialog)\n\nDialog.$create({\n  ...\n})\n")])])}],!1,null,null,null);n.default=_.exports}}]);