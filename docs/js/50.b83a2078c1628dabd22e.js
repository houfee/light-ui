(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{HWhe:function(e,t,n){"use strict";n.r(t);var a=n("KHd+"),v=Object(a.a)({},function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"markdown"},[n("h2",[e._v("CascadePicker组件")]),e._v(" "),n("blockquote",[n("p",[e._v("1.2.0 新增")])]),e._v(" "),n("p",[n("code",[e._v("CascadePicker")]),e._v("组件是级联选择器，用于实现多列选择之间的级联变化。比如，在选择省市区时，当省切换到了江苏省，城市列应该变成江苏省的各个城市，同理，如果城市切换到苏州市，区列的选项也应变成苏州市的各个区，这就级联的意义。")]),e._v(" "),n("p",[n("strong",[e._v("注：")]),e._v(" 由于此组件基于 create-api 实现，所以在使用之前，请确保自己了解过 "),n("a",{attrs:{href:"#/zh-CN/docs/create-api"}},[e._v("create-api")]),e._v("。")]),e._v(" "),n("h3",[e._v("示例")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("基本用法")]),e._v(" "),n("p",[e._v("相比普通选择器，级联选择器需要传入的数据结构是不一样的。普通选择器的数据结构是一个二维数组，每一列对应一个固定的数组，而级联选择器，则需要传入的是一个树形结构，第一列数组的每个选项的children属性，对应着切换到该选项时后续列的数据，从而实现对后续列的改变。如下所示：")]),e._v(" "),n("pre",[n("code",{staticClass:"language-html"},[e._v('<cube-button @click="showCascadePicker">Cascade Picker</cube-button>\n')])]),e._v(" "),n("pre",[n("code",{staticClass:"language-js"},[e._v("const cascadeData = [\n  {\n    value: 'Fruit',\n    text: 'Fruit',\n    children: [\n      {\n        value: 'Apple',\n        text: 'Apple',\n        children: [{ value: 1, text: 'One' }, { value: 2, text: 'Two' }]\n      },\n      {\n        value: 'Orange',\n        text: 'Orange',\n        children: [{ value: 3, text: 'Three'}, { value: 4, text: 'Four' }]\n      }\n    ]\n  },\n  {\n    value: 'Drink',\n    text: 'Drink',\n    children: [\n      {\n        value: 'Coffee',\n        text: 'Coffee',\n        children: [{ value: 1, text: 'One' }, { value: 2, text: 'Two' }]\n      },\n      {\n        value: 'Tea',\n        text: 'Tea',\n        children: [{ value: 1, text: 'One' }, { value: 3, text: 'Three'}]\n      }\n    ]\n  }\n]\nexport default {\n  mounted () {\n    this.cascadePicker = this.$createCascadePicker({\n      title: 'Cascade Picker',\n      data: cascadeData,\n      selectedIndex: [0, 1, 0],\n      onSelect: this.selectHandle,\n      onCancel: this.cancelHandle\n    })\n  },\n  methods: {\n    showCascadePicker() {\n      this.cascadePicker.show()\n    },\n    selectHandle(selectedVal, selectedIndex, selectedText) {\n      this.$createDialog({\n        type: 'warn',\n        content: `Selected Item: <br/> - value: ${selectedVal.join(', ')} <br/> - index: ${selectedIndex.join(', ')} <br/> - text: ${selectedText.join(' ')}`,\n        icon: 'cubeic-alert'\n      }).show()\n    },\n    cancelHandle() {\n      this.$createToast({\n        type: 'correct',\n        txt: 'Picker canceled',\n        time: 1000\n      }).show()\n    }\n  }\n}\n")])]),e._v(" "),n("p",[e._v("当第一列选中"),n("code",[e._v("Fruit")]),e._v("时，第二列的选项是"),n("code",[e._v("Apple")]),e._v("、"),n("code",[e._v("Orange")]),e._v("。以此类推，当第二列选中"),n("code",[e._v("Orange")]),e._v("时，第三列的选项是"),n("code",[e._v("Three")]),e._v("、"),n("code",[e._v("Four")]),e._v("。")])]),e._v(" "),n("li",[n("p",[e._v("地址选择器")]),e._v(" "),n("p",[e._v("对于地址选择器，只需要构造出级联选择器的数据结构传入就可以了。")]),e._v(" "),n("pre",[n("code",{staticClass:"language-html"},[e._v('<cube-button @click="showAddressPicker">Address Picker</cube-button>\n')])]),e._v(" "),n("pre",[n("code",{staticClass:"language-js"},[e._v("import { provinceList, cityList, areaList } from 'example/data/area'\n\nconst addressData = provinceList\naddressData.forEach(province => {\n  province.children = cityList[province.value]\n  province.children.forEach(city => {\n    city.children = areaList[city.value]\n  })\n})\n\nexport default {\n  mounted () {\n    this.addressPicker = this.$createCascadePicker({\n      title: 'City Picker',\n      data: addressData,\n      onSelect: this.selectHandle,\n      onCancel: this.cancelHandle\n    })\n  },\n  methods: {\n    showAddressPicker() {\n      this.addressPicker.show()\n    },\n    selectHandle(selectedVal, selectedIndex, selectedText) {\n      this.$createDialog({\n        type: 'warn',\n        content: `Selected Item: <br/> - value: ${selectedVal.join(', ')} <br/> - index: ${selectedIndex.join(', ')} <br/> - text: ${selectedText.join(' ')}`,\n        icon: 'cubeic-alert'\n      }).show()\n    },\n    cancelHandle() {\n      this.$createToast({\n        type: 'correct',\n        txt: 'Picker canceled',\n        time: 1000\n      }).show()\n    }\n  }\n}\n")])])]),e._v(" "),n("li",[n("p",[e._v("实例方法 "),n("code",[e._v("setData")])]),e._v(" "),n("p",[n("code",[e._v("setData")]),e._v("方法，用于重置"),n("code",[e._v("CascadePicker")]),e._v("实例的数据和选中的索引。")]),e._v(" "),n("pre",[n("code",{staticClass:"language-html"},[e._v('<cube-button @click="showSetDataPicker">SetData Picker</cube-button>\n')])]),e._v(" "),n("pre",[n("code",{staticClass:"language-js"},[e._v("export default {\n  mounted () {\n    this.setDataPicker = this.$createCascadePicker({\n      title: 'Set Data',\n      onSelect: this.selectHandle,\n      onCancel: this.cancelHandle\n    })\n  },\n  methods: {\n    showSetDataPicker() {\n      // setData when the picker is invisible.\n      this.setDataPicker.setData(cascadeData)\n\n      this.setDataPicker.show()\n      setTimeout(() => {\n        // setData when the picker is visible.\n        this.setDataPicker.setData(addressData, [1, 1, 0])\n      }, 1000)\n    },\n    selectHandle(selectedVal, selectedIndex, selectedText) {\n      this.$createDialog({\n        type: 'warn',\n        content: `Selected Item: <br/> - value: ${selectedVal.join(', ')} <br/> - index: ${selectedIndex.join(', ')} <br/> - text: ${selectedText.join(' ')}`,\n        icon: 'cubeic-alert'\n      }).show()\n    },\n    cancelHandle() {\n      this.$createToast({\n        type: 'correct',\n        txt: 'Picker canceled',\n        time: 1000\n      }).show()\n    }\n  }\n}\n")])])]),e._v(" "),n("li",[n("p",[e._v("异步加载数据")]),e._v(" "),n("p",[e._v("当数据量太大时，可能难以在最开始就生成完整的级联数据树。这时，你可以配置 "),n("code",[e._v("async")]),e._v(" 属性开启异步加载级联数据，在 "),n("code",[e._v("change")]),e._v(" 事件时，去更新数据，并且在你更新完数据之前，用户点击确认会是无效的。")]),e._v(" "),n("pre",[n("code",{staticClass:"language-html"},[e._v('<cube-button @click="showAsyncPicker">Async Load Data</cube-button>\n')])]),e._v(" "),n("pre",[n("code",{staticClass:"language-js"},[e._v("import { provinceList, cityList, areaList } from 'example/data/area'\n\nconst asyncData = provinceList\nconst asyncSelectedIndex = [0, 0, 0]\nasyncData[0].children = cityList[asyncData[0].value]\nasyncData[0].children[0].children = areaList[asyncData[0].children[0].value]\n\nexport default {\n  mounted () {\n    this.asyncPicker = this.$createCascadePicker({\n      title: 'Async Load Data',\n      async: true,\n      data: asyncData,\n      selectedIndex: asyncSelectedIndex.slice(),\n      onSelect: this.selectHandle,\n      onCancel: this.cancelHandle,\n      onChange: this.asyncChangeHandle\n    })\n  },\n  methods: {\n    showAsyncPicker() {\n      this.asyncPicker.show()\n    },\n    asyncChangeHandle(i, newIndex) {\n      if (newIndex !== asyncSelectedIndex[i]) {\n        asyncSelectedIndex[i] = newIndex\n        // If the first two column is changed, request the data for rest columns.\n        if (i < 2) {\n          // Mock async load.\n          setTimeout(() => {\n            if (i === 0) {\n              const current = asyncData[newIndex]\n              current.children = current.children || cityList[current.value]\n              current.children[0].children = current.children[0].children || areaList[current.children[0].value]\n              asyncSelectedIndex[1] = 0\n              asyncSelectedIndex[2] = 0\n            }\n\n            if (i === 1) {\n              const current = asyncData[asyncSelectedIndex[0]].children[newIndex]\n              current.children = current.children || areaList[current.value]\n              asyncSelectedIndex[2] = 0\n            }\n            this.asyncPicker.setData(asyncData, asyncSelectedIndex)\n          }, 500)\n        }\n      }\n    },\n    selectHandle(selectedVal, selectedIndex, selectedText) {\n      this.$createDialog({\n        type: 'warn',\n        content: `Selected Item: <br/> - value: ${selectedVal.join(', ')} <br/> - index: ${selectedIndex.join(', ')} <br/> - text: ${selectedText.join(' ')}`,\n        icon: 'cubeic-alert'\n      }).show()\n    },\n    cancelHandle() {\n      this.$createToast({\n        type: 'correct',\n        txt: 'Picker canceled',\n        time: 1000\n      }).show()\n    }\n  }\n}\n")])])])]),e._v(" "),n("h3",[e._v("Props 配置")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("参数")]),e._v(" "),n("th",[e._v("说明")]),e._v(" "),n("th",[e._v("类型")]),e._v(" "),n("th",[e._v("默认值")]),e._v(" "),n("th",[e._v("示例")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("data")]),e._v(" "),n("td",[e._v("级联选择器的树形数据，用于初始化选项")]),e._v(" "),n("td",[e._v("Array")]),e._v(" "),n("td",[e._v("[]")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("selectedIndex")]),e._v(" "),n("td",[e._v("被选中的索引值，拉起选择器后显示这个索引值对应的内容")]),e._v(" "),n("td",[e._v("Array")]),e._v(" "),n("td",[e._v("[]")]),e._v(" "),n("td",[e._v("[1]")])]),e._v(" "),n("tr",[n("td",[e._v("async<sup>1.8.1</sup>")]),e._v(" "),n("td",[e._v("异步加载数据")]),e._v(" "),n("td",[e._v("Boolean")]),e._v(" "),n("td",[e._v("false")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("title")]),e._v(" "),n("td",[e._v("标题")]),e._v(" "),n("td",[e._v("String")]),e._v(" "),n("td",[e._v("''")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("subtitle<sup>1.8.1</sup>")]),e._v(" "),n("td",[e._v("副标题")]),e._v(" "),n("td",[e._v("String")]),e._v(" "),n("td",[e._v("''")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("cancelTxt")]),e._v(" "),n("td",[e._v("取消按钮文案")]),e._v(" "),n("td",[e._v("String")]),e._v(" "),n("td",[e._v("'取消'")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("confirmTxt")]),e._v(" "),n("td",[e._v("确定按钮文案")]),e._v(" "),n("td",[e._v("String")]),e._v(" "),n("td",[e._v("'确定'")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("swipeTime")]),e._v(" "),n("td",[e._v("快速滑动选择器滚轮时，惯性滚动动画的时长，单位：ms")]),e._v(" "),n("td",[e._v("Number")]),e._v(" "),n("td",[e._v("2500")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("alias")]),e._v(" "),n("td",[e._v("配置"),n("code",[e._v("value")]),e._v("和"),n("code",[e._v("text")]),e._v("的别名，用法同"),n("code",[e._v("Picker")]),e._v("组件")]),e._v(" "),n("td",[e._v("Object")]),e._v(" "),n("td",[e._v("{}")]),e._v(" "),n("td",[e._v("{ value: 'id', text: 'name'}")])]),e._v(" "),n("tr",[n("td",[e._v("visible<sup>1.8.1</sup>")]),e._v(" "),n("td",[e._v("显示状态，是否可见。"),n("code",[e._v("v-model")]),e._v("绑定值")]),e._v(" "),n("td",[e._v("Boolean")]),e._v(" "),n("td",[e._v("false")]),e._v(" "),n("td",[e._v("false")])]),e._v(" "),n("tr",[n("td",[e._v("maskClosable<sup>1.9.6</sup>")]),e._v(" "),n("td",[e._v("点击蒙层是否隐藏")]),e._v(" "),n("td",[e._v("Boolean")]),e._v(" "),n("td",[e._v("true/false")]),e._v(" "),n("td",[e._v("true")])]),e._v(" "),n("tr",[n("td",[e._v("zIndex<sup>1.9.6</sup>")]),e._v(" "),n("td",[e._v("样式 z-index 的值")]),e._v(" "),n("td",[e._v("Number")]),e._v(" "),n("td",[e._v("100")]),e._v(" "),n("td",[e._v("-")])])])]),e._v(" "),n("ul",[n("li",[n("code",[e._v("data")]),e._v("子配置项")])]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("参数")]),e._v(" "),n("th",[e._v("说明")]),e._v(" "),n("th",[e._v("类型")]),e._v(" "),n("th",[e._v("默认值")]),e._v(" "),n("th",[e._v("示例")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("text")]),e._v(" "),n("td",[e._v("每个选项展示的文案")]),e._v(" "),n("td",[e._v("String/Number")]),e._v(" "),n("td",[e._v("-")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("value")]),e._v(" "),n("td",[e._v("每个选项的值")]),e._v(" "),n("td",[e._v("String/Number/Boolean")]),e._v(" "),n("td",[e._v("-")]),e._v(" "),n("td",[e._v("-")])])])]),e._v(" "),n("h3",[e._v("事件")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("事件名")]),e._v(" "),n("th",[e._v("说明")]),e._v(" "),n("th",[e._v("参数1")]),e._v(" "),n("th",[e._v("参数2")]),e._v(" "),n("th",[e._v("参数3")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("select")]),e._v(" "),n("td",[e._v("点击确认按钮触发此事件")]),e._v(" "),n("td",[e._v("selectedVal: 当前选中项每一列的值，Array类型")]),e._v(" "),n("td",[e._v("selectedIndex: 当前选中项每一列的索引，Array类型")]),e._v(" "),n("td",[e._v("selectedText: 当前选中项每一列的文案，Array类型")])]),e._v(" "),n("tr",[n("td",[e._v("change")]),e._v(" "),n("td",[e._v("滚轴滚动后触发此事件")]),e._v(" "),n("td",[e._v("index: 当前滚动列次序，Number类型")]),e._v(" "),n("td",[e._v("selectedIndex: 当前列选中项的索引，Number类型")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("cancel")]),e._v(" "),n("td",[e._v("点击取消按钮触发此事件")]),e._v(" "),n("td",[e._v("-")]),e._v(" "),n("td",[e._v("-")]),e._v(" "),n("td")])])]),e._v(" "),n("h3",[e._v("实例方法")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("方法名")]),e._v(" "),n("th",[e._v("说明")]),e._v(" "),n("th",[e._v("参数1")]),e._v(" "),n("th",[e._v("参数2")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("setData")]),e._v(" "),n("td",[e._v("重置数据和选中的索引")]),e._v(" "),n("td",[e._v("级联树形数据结构，Array类型")]),e._v(" "),n("td",[e._v("每列选中的索引，Array类型")])]),e._v(" "),n("tr",[n("td",[e._v("show")]),e._v(" "),n("td",[e._v("显示")]),e._v(" "),n("td",[e._v("-")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("hide")]),e._v(" "),n("td",[e._v("隐藏")]),e._v(" "),n("td",[e._v("-")]),e._v(" "),n("td",[e._v("-")])])])])])}],!1,null,null,null);t.default=v.exports}}]);