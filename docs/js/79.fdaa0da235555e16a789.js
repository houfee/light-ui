(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{"2wAK":function(e,t,n){"use strict";n.r(t);var l=n("KHd+"),c=Object(l.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"markdown"},[n("h2",[e._v("Sticky 组件")]),e._v(" "),e._m(0),e._v(" "),n("p",[e._v("吸附组件，当滚动位置到达目标元素位置后，目标元素就会自动吸附。")]),e._v(" "),n("h3",[e._v("示例")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("综合使用 - Scroll")]),e._v(" "),n("pre",[n("code",{staticClass:"language-html"},[e._v('<cube-sticky :pos="scrollY">\n  <cube-scroll\n    :scroll-events="scrollEvents"\n    @scroll="scrollHandler">\n    <ul>\n      <li>title</li>\n    </ul>\n    <cube-sticky-ele ele-key="11">\n      <ul class="sticky-header">\n        <li>111</li>\n      </ul>\n    </cube-sticky-ele>\n    <ul>\n      <li v-for="item in items">'+e._s(e.item)+'</li>\n    </ul>\n    <cube-sticky-ele ele-key="22">\n      <ul class="sticky-header">\n        <li>222</li>\n        <li>222</li>\n      </ul>\n    </cube-sticky-ele>\n    <ul>\n      <li v-for="item in items2">'+e._s(e.item)+'</li>\n    </ul>\n    <cube-sticky-ele ele-key="33">\n      <ul class="sticky-header">\n        <li>333</li>\n      </ul>\n    </cube-sticky-ele>\n    <ul>\n      <li v-for="item in items3">'+e._s(e.item)+'</li>\n    </ul>\n  </cube-scroll>\n  <template slot="fixed" slot-scope="props">\n    <ul class="sticky-header">\n      <li>'+e._s(e.props.current)+"</li>\n    </ul>\n  </template>\n</cube-sticky>\n")])]),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5)]),e._v(" "),n("li",[n("p",[e._v("综合使用 - Native Scroll")]),e._v(" "),n("p",[e._v("利用原生滚动实现效果。")]),e._v(" "),n("pre",[n("code",{staticClass:"language-html"},[e._v('<cube-sticky :pos="scrollY" :check-top="checkTop">\n  <div class="scroll-ele" @scroll="scrollHandler">\n    <ul>\n      <li>title</li>\n    </ul>\n    <cube-sticky-ele>\n      <ul class="sticky-header">\n        <li>111</li>\n      </ul>\n    </cube-sticky-ele>\n    <ul>\n      <li v-for="item in items">'+e._s(e.item)+'</li>\n    </ul>\n    <cube-sticky-ele>\n      <ul class="sticky-header">\n        <li>222</li>\n        <li>222</li>\n      </ul>\n    </cube-sticky-ele>\n    <ul>\n      <li v-for="item in items2">'+e._s(e.item)+'</li>\n    </ul>\n    <cube-sticky-ele>\n      <ul class="sticky-header">\n        <li>333</li>\n      </ul>\n    </cube-sticky-ele>\n    <ul>\n      <li v-for="item in items3">'+e._s(e.item)+"</li>\n    </ul>\n  </div>\n</cube-sticky>\n")])]),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),n("p",[e._v("这个示例展示的就是利用原生滚动实现吸附效果的。")]),e._v(" "),e._m(8)]),e._v(" "),n("li",[n("p",[e._v("模拟微信效果 - WeChat")]),e._v(" "),n("pre",[n("code",{staticClass:"language-html"},[e._v('<cube-sticky\n  :pos="scrollY"\n  :check-top="checkTop"\n  fixed-show-ani="sticky-fixed-show"\n  @diff-change="diffChange">\n  <cube-scroll\n    :scroll-events="scrollEvents"\n    @scroll="scrollHandler">\n    <img src="https://ss3.bdstatic.com/iPoZeXSm1A5BphGlnYG/skin/6.jpg">\n    <cube-sticky-ele>\n      <ul class="sticky-header">\n        <li>111</li>\n      </ul>\n    </cube-sticky-ele>\n    <ul>\n      <li v-for="item in items" class="border-top-1px">'+e._s(e.item)+'</li>\n    </ul>\n    <ul>\n      <li v-for="item in items2" class="border-top-1px">'+e._s(e.item)+'</li>\n    </ul>\n    <ul>\n      <li v-for="item in items3" class="border-top-1px">'+e._s(e.item)+'</li>\n    </ul>\n  </cube-scroll>\n  <ul class="sticky-header" slot="fixed" ref="stickyHeader">\n    <li>header</li>\n  </ul>\n</cube-sticky>\n')])]),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),e._m(12)])]),e._v(" "),n("h3",[e._v("Props")]),e._v(" "),n("h4",[e._v("CubeSticky")]),e._v(" "),e._m(13),e._v(" "),n("h4",[e._v("CubeStickyEle")]),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),n("h3",[e._v("插槽")]),e._v(" "),e._m(16),e._v(" "),n("h3",[e._v("事件")]),e._v(" "),e._m(17),e._v(" "),n("h3",[e._v("实例方法")]),e._v(" "),e._m(18)])},[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("1.10.0 新增")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",[n("code",{staticClass:"language-js"},[e._v("const _data = [\n  '😀 😁 😂 🤣 😃 😄 ',\n  '🙂 🤗 🤩 🤔 🤨 😐 ',\n  '👆🏻 scroll up/down 👇🏻 ',\n  '😔 😕 🙃 🤑 😲 ☹️ ',\n  '🐣 🐣 🐣 🐣 🐣 🐣 ',\n  '👆🏻 scroll up/down 👇🏻 ',\n  '🐥 🐥 🐥 🐥 🐥 🐥 ',\n  '🤓 🤓 🤓 🤓 🤓 🤓 ',\n  '👆🏻 scroll up/down 👇🏻 ',\n  '🦔 🦔 🦔 🦔 🦔 🦔 ',\n  '🙈 🙈 🙈 🙈 🙈 🙈 ',\n  '👆🏻 scroll up/down 👇🏻 ',\n  '🚖 🚖 🚖 🚖 🚖 🚖 ',\n  '✌🏻 ✌🏻 ✌🏻 ✌🏻 ✌🏻 ✌🏻 '\n]\nexport default {\n  data() {\n    return {\n      scrollEvents: ['scroll'],\n      scrollY: 0,\n      items: _data.concat(),\n      items2: _data.concat(),\n      items3: _data.concat()\n    }\n  },\n  methods: {\n    scrollHandler({ y }) {\n      this.scrollY = -y\n    }\n  }\n}\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("cube-sticky")]),e._v(" 需要和 "),n("code",[e._v("cube-sticky-ele")]),e._v(" 组件配合使用。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("cube-sticky")]),e._v(" 组件依赖 "),n("code",[e._v("pos")]),e._v(" Prop 来指定当前实时位置，由于 Scroll 组件中派发的 "),n("code",[e._v("y")]),e._v(" 为负值，所以我们需要将其转换为滚动位置，直接取 "),n("code",[e._v("-y")]),e._v(" 即可。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("cube-sticky-ele")]),e._v(" 组件的 "),n("code",[e._v("ele-key")]),e._v(" Prop 是可选的，用于指定当前吸附元素的 key 值，默认为当前组件的索引值，即在 "),n("code",[e._v("cube-sticky")]),e._v(" 组件中的第几个 "),n("code",[e._v("cube-sticky-ele")]),e._v("。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("我们还可以利用 "),n("code",[e._v("cube-sticky")]),e._v(" 组件的 "),n("code",[e._v("fixed")]),e._v(" 插槽实现自定义吸附效果，如果没有插槽的话，内部默认会将吸附的 "),n("code",[e._v("cube-sticky-ele")]),e._v(" 的内容显示出来。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",[n("code",{staticClass:"language-js"},[e._v("const _data = [\n  '😀 😁 😂 🤣 😃 😄 ',\n  '🙂 🤗 🤩 🤔 🤨 😐 ',\n  '👆🏻 scroll up/down 👇🏻 ',\n  '😔 😕 🙃 🤑 😲 ☹️ ',\n  '🐣 🐣 🐣 🐣 🐣 🐣 ',\n  '👆🏻 scroll up/down 👇🏻 ',\n  '🐥 🐥 🐥 🐥 🐥 🐥 ',\n  '🤓 🤓 🤓 🤓 🤓 🤓 ',\n  '👆🏻 scroll up/down 👇🏻 ',\n  '🦔 🦔 🦔 🦔 🦔 🦔 ',\n  '🙈 🙈 🙈 🙈 🙈 🙈 ',\n  '👆🏻 scroll up/down 👇🏻 ',\n  '🚖 🚖 🚖 🚖 🚖 🚖 ',\n  '✌🏻 ✌🏻 ✌🏻 ✌🏻 ✌🏻 ✌🏻 '\n]\n\nexport default {\n  data() {\n    return {\n      scrollY: 0,\n      checkTop: false,\n      items: _data.concat(),\n      items2: _data.concat(),\n      items3: _data.concat()\n    }\n  },\n  methods: {\n    scrollHandler(e) {\n      this.scrollY = e.currentTarget.scrollTop\n    }\n  }\n}\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",[n("code",{staticClass:"language-stylus"},[e._v(".scroll-ele\n  height: 100%\n  overflow: auto\n  -webkit-overflow-scrolling: touch\n  background-color: #fff\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("check-top")]),e._v(" Prop 则是用来控制检查条件的，默认为 "),n("code",[e._v("true")]),e._v("，意味着当 "),n("code",[e._v("cube-sticky-ele")]),e._v(" 元素的顶部达到 "),n("code",[e._v("cube-sticky")]),e._v(" 的顶部的时候就会被吸附；这个例子中我们设置为了 "),n("code",[e._v("false")]),e._v("，意味着当 "),n("code",[e._v("cube-sticky-ele")]),e._v(" 的底部达到 "),n("code",[e._v("cube-sticky")]),e._v(" 的顶部的时候会被吸附。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",[n("code",{staticClass:"language-js"},[e._v("const _data = [\n  '😀 😁 😂 🤣 😃 😄 ',\n  '🙂 🤗 🤩 🤔 🤨 😐 ',\n  '👆🏻 scroll up/down 👇🏻 ',\n  '😔 😕 🙃 🤑 😲 ☹️ ',\n  '🐣 🐣 🐣 🐣 🐣 🐣 ',\n  '👆🏻 scroll up/down 👇🏻 ',\n  '🐥 🐥 🐥 🐥 🐥 🐥 ',\n  '🤓 🤓 🤓 🤓 🤓 🤓 ',\n  '👆🏻 scroll up/down 👇🏻 ',\n  '🦔 🦔 🦔 🦔 🦔 🦔 ',\n  '🙈 🙈 🙈 🙈 🙈 🙈 ',\n  '👆🏻 scroll up/down 👇🏻 ',\n  '🚖 🚖 🚖 🚖 🚖 🚖 ',\n  '✌🏻 ✌🏻 ✌🏻 ✌🏻 ✌🏻 ✌🏻 '\n]\n\nexport default {\n  data() {\n    return {\n      scrollEvents: ['scroll'],\n      scrollY: 0,\n      checkTop: true,\n      items: _data.concat(),\n      items2: _data.concat(),\n      items3: _data.concat()\n    }\n  },\n  methods: {\n    scrollHandler({ y }) {\n      this.scrollY = -y\n    },\n    diffChange() {\n      let opacity = 0\n      if (height) {\n        opacity = diff / height\n      }\n      this.$refs.stickyHeader.style.opacity = opacity\n    }\n  }\n}\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",[n("code",{staticClass:"language-stylus"},[e._v(".sticky-fixed-show-enter, .sticky-fixed-show-leave-active\n  transform: translate(0, -100%)\n.sticky-fixed-show-enter-active, .sticky-fixed-show-leave-active\n  transition: all .5s ease-in-out\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("可以通过 "),n("code",[e._v("fixed-show-ani")]),e._v(" 指定当元素吸附时出现的 "),n("code",[e._v("transition")]),e._v(" 名字，我们这里指定 "),n("code",[e._v("sticky-fixed-show")]),e._v("，所以相对应的我们在样式中加了对应的动画控制效果。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("同时可以通过 "),n("code",[e._v("diff-change")]),e._v(" 事件得到当前 sticky 元素滚动的差值，一般我们可以和当前 sticky 元素的高做除法得到相对百分比，可以精细控制出现的具体细节。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("table",[n("thead",[n("tr",[n("th",[e._v("参数")]),e._v(" "),n("th",[e._v("说明")]),e._v(" "),n("th",[e._v("类型")]),e._v(" "),n("th",[e._v("可选值")]),e._v(" "),n("th",[e._v("默认值")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("pos")]),e._v(" "),n("td",[e._v("必须，滚动位置")]),e._v(" "),n("td",[e._v("Number")]),e._v(" "),n("td",[e._v("-")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("checkTop")]),e._v(" "),n("td",[e._v("是否检测顶部位置，如果为 false，则检查 sticky-ele 元素的底部边界")]),e._v(" "),n("td",[e._v("Boolean")]),e._v(" "),n("td",[e._v("true/false")]),e._v(" "),n("td",[e._v("true")])]),e._v(" "),n("tr",[n("td",[e._v("fixedShowAni")]),e._v(" "),n("td",[e._v("元素吸附时指定 transition 的 name 值")]),e._v(" "),n("td",[e._v("String")]),e._v(" "),n("td",[e._v("-")]),e._v(" "),n("td",[e._v("如果 checkTop 为 true，则为 ''，如果为 false，则为 'cube-sticky-fixed-fade'")])]),e._v(" "),n("tr",[n("td",[e._v("offset")]),e._v(" "),n("td",[e._v("偏移值，传入的 pos 的值会加上这个值修正")]),e._v(" "),n("td",[e._v("Number")]),e._v(" "),n("td",[e._v("-")]),e._v(" "),n("td",[e._v("0")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("table",[n("thead",[n("tr",[n("th",[e._v("参数")]),e._v(" "),n("th",[e._v("说明")]),e._v(" "),n("th",[e._v("类型")]),e._v(" "),n("th",[e._v("可选值")]),e._v(" "),n("th",[e._v("默认值")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("eleKey")]),e._v(" "),n("td",[e._v("吸顶元素的 key 值")]),e._v(" "),n("td",[e._v("Number/String")]),e._v(" "),n("td",[e._v("-")]),e._v(" "),n("td",[e._v("-")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("当 "),n("code",[e._v("eleKey")]),e._v(" 不存在时，CubeSticky 组件会获取当前 CubeStickyEle 组件的次序索引作为吸附元素的标示。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("table",[n("thead",[n("tr",[n("th",[e._v("名字")]),e._v(" "),n("th",[e._v("说明")]),e._v(" "),n("th",[e._v("作用域参数")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("default")]),e._v(" "),n("td",[e._v("默认内容")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("fixed")]),e._v(" "),n("td",[e._v("元素吸附时内容如何展示")]),e._v(" "),n("td",[e._v("current: 当前吸附元素的 key 值<br>index: 吸附元素索引值（非响应式的）")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("table",[n("thead",[n("tr",[n("th",[e._v("事件名")]),e._v(" "),n("th",[e._v("说明")]),e._v(" "),n("th",[e._v("参数1")]),e._v(" "),n("th",[e._v("参数2")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("change")]),e._v(" "),n("td",[e._v("吸附的元素发生改变时触发")]),e._v(" "),n("td",[e._v("current - 吸附的元素的 key 值，如果没有的话，则为 ''")]),e._v(" "),n("td",[e._v("index - 吸附元素的索引值，没有的话，则为 -1（非响应式的）")])]),e._v(" "),n("tr",[n("td",[e._v("diff-change")]),e._v(" "),n("td",[e._v("sticky 元素滚动的差值改变时触发")]),e._v(" "),n("td",[e._v("diff - 差值，最小 0")]),e._v(" "),n("td",[e._v("height: 当前 sticky 元素的高度")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("table",[n("thead",[n("tr",[n("th",[e._v("方法名")]),e._v(" "),n("th",[e._v("说明")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("refresh")]),e._v(" "),n("td",[e._v("刷新，当内容发生变化时可用于重新计算高度和位置")])])])])}],!1,null,null,null);t.default=c.exports}}]);