(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{JshI:function(t,e,v){"use strict";v.r(e);var _=v("KHd+"),n=Object(_.a)({},function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("div",{staticClass:"markdown"},[v("h2",[t._v("RecycleList")]),t._v(" "),t._m(0),t._v(" "),v("p",[t._v("可回收的滚动列表，始终将 DOM 的数量控制在一个很低的范围。在海量数据的渲染列表中，拥有卓越的性能。")]),t._v(" "),v("h3",[t._v("注意事项")]),t._v(" "),t._m(1),t._v(" "),v("h3",[t._v("示例")]),t._v(" "),v("ul",[v("li",[t._m(2),t._v(" "),v("pre",[v("code",{staticClass:"language-html"},[t._v('<div class="view-wrapper">\n  <cube-recycle-list class="list" :size="size" :on-fetch="onFetch" :offset="offset">\n    <template slot="item" slot-scope="{ data }">\n      <div :id="data.id" class="item" @click="handleClick(data)">\n        <div class="avatar" :style="{backgroundImage: \'url(\' + (data.avatar || \'\') + \')\'}"></div>\n        <div class="bubble">\n          <p>'+t._s(t.data.msg)+'</p>\n          <div class="meta">\n            <time class="posted-date">'+t._s(t.data.time)+"</time>\n          </div>\n        </div>\n      </div>\n    </template>\n  </cube-recycle-list>\n</div>\n")])]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),v("p",[t._v("绝大部分的列表交互，都是当用户滚动到底部再去请求下一页数据，组件的默认实现就是根据此交互而来。")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7)]),t._v(" "),v("li",[t._m(8),t._v(" "),t._m(9),t._v(" "),v("pre",[v("code",{staticClass:"language-html"},[t._v('<div class="view-wrapper">\n  <cube-recycle-list class="list" :infinite="infinite" :size="size" :on-fetch="onFetch">\n    \x3c!-- tombstone 的作用域插槽 slot-scope 必须声明 --\x3e\n    <template slot="tombstone" slot-scope="props">\n      <div class="item tombstone">\n        <div class="avatar"></div>\n        <div class="bubble">\n          <p></p>\n          <p></p>\n          <p></p>\n          <div class="meta">\n            <time class="posted-date"></time>\n          </div>\n        </div>\n      </div>\n    </template>\n    <template slot="item" slot-scope="{ data }">\n      <div :id="data.id" class="item" @click="handleClick(data)">\n        <div class="avatar" :style="{backgroundImage: \'url(\' + (data.avatar || \'\') + \')\'}"></div>\n        <div class="bubble">\n          <p>'+t._s(t.data.msg)+'</p>\n          <div class="meta">\n            <time class="posted-date">'+t._s(t.data.time)+'</time>\n          </div>\n        </div>\n      </div>\n    </template>\n    \x3c!-- <div slot="spinner">Loading Data</div> --\x3e\n    \x3c!-- <div slot="noMore">没有更多数据了</div> --\x3e\n  </cube-recycle-list>\n</div>\n')])]),t._v(" "),t._m(10)])]),t._v(" "),v("h3",[t._v("Props 配置")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),v("h3",[t._v("插槽")]),t._v(" "),t._m(13),t._v(" "),v("h3",[t._v("实例方法")]),t._v(" "),t._m(14)])},[function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("blockquote",[v("p",[t._v("1.12.0 新增")])])},function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ul",[v("li",[v("p",[t._v("首先要实现无限滚动，必须保证要有一个固定高度的父容器元素包裹组件。详细可以参考示例。")])]),t._v(" "),v("li",[v("p",[t._v("如果列表内容存在不固定宽高的图片，由于图片加载的机制，每个 item 的 DOM 渲染了，图片可能还未加载，导致每个 item 的位置计算错误，所以作为调用方，需要将未加载的图片用样式固定住，这样就能避免高度计算错误。")])]),t._v(" "),v("li",[v("p",[t._v("内部的实现依赖 Promise，所以你需要引入 Promise polyfill 来做兼容。")])])])},function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("p",[v("strong",[t._v("1. 默认使用")])])},function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("pre",[v("code",{staticClass:"language-js"},[t._v("export default {\n  data() {\n    return {\n      size: 50,\n      offset: 100\n    }\n  },\n  methods: {\n    onFetch() {\n      let items = []\n      return new Promise((resolve) => {\n        // 模拟请求 50 条数据，因为 size 设置为 50\n        setTimeout(() => {\n          for (let i = 0; i < 50; i++) {\n            items.push({\n              id: i,\n              avatar: 'https://s3.amazonaws.com/uifaces/faces/twitter/danpliego/128.jpg',\n              msg: '123',\n              time: 'Thu Oct 25 2018 15:02:12 GMT+0800 (中国标准时间)'\n            })\n          }\n          resolve(items)\n        }, 1000)\n      })\n    },\n    handleClick(data) {\n      console.log('Item:' + data)\n    }\n  }\n}\n")])])},function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("pre",[v("code",{staticClass:"language-stylus"},[t._v("/* 限制视口 包裹组件*/\n.view-wrapper\n  position: fixed\n  top: 54px\n  left: 0\n  bottom: 0\n  width: 100%\n")])])},function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("p",[t._v("组件接收 "),v("code",[t._v("size")]),t._v(" 作为 props，用来控制一次渲染多少条数据。"),v("code",[t._v("offset")]),t._v(" 是配置底部拉取数据的距离，"),v("code",[t._v("onFetch")]),t._v(" 是一个函数，此属性是必传的，并且函数的返回值必须是一个 Promise，同时调用 resolve 函数的时候必须将 items（"),v("strong",[t._v("数组")]),t._v("） 传入，这样组件就能拿到 "),v("code",[t._v("items")]),t._v("。当然如果想要停止滚动，请传入 "),v("code",[t._v("false")]),t._v("。")])},function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("p",[t._v("组件支持作用域插槽，你可以通过以上示例的解构赋值，拿到组件传给调用方的 "),v("code",[t._v("data")]),t._v("（items 的每一个数据项）。")])},function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("p",[t._v("完整示例代码在"),v("a",{attrs:{href:"https://github.com/didi/cube-ui/blob/master/example/pages/recycle-list/recycle-list-default.vue"}},[t._v("这里")]),t._v("。")])},function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("p",[v("strong",[t._v("2. Infinite")])])},function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("p",[t._v("然而，组件还支持第二种交互方式，无限滚动模式，以 "),v("code",[t._v("tombstone")]),t._v(" 作为占位符，\b给用户一种可感知的页面元素，让交互变的更加友好、人性化。\n完整示例代码在"),v("a",{attrs:{href:"https://github.com/didi/cube-ui/blob/master/example/pages/recycle-list/recycle-list-tombstone.vue"}},[t._v("这里")]),t._v("。")])},function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("p",[v("code",[t._v("infinite")]),t._v(" 用来开启无限滚动模式。当你开启这个配置的时候，必须通过 "),v("code",[t._v("tombstone")]),t._v(" 作用域插槽实现个性化样式。支持 "),v("code",[t._v("spinner")]),t._v(" 与 "),v("code",[t._v("noMore")]),t._v(" 插槽来定制化显示加载更多以及无更多数据的视图展示。"),v("code",[t._v("spinner")]),t._v(" 默认是一个 loading 图。")])},function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("table",[v("thead",[v("tr",[v("th",[t._v("参数")]),t._v(" "),v("th",[t._v("说明")]),t._v(" "),v("th",[t._v("类型")]),t._v(" "),v("th",[t._v("可选值")]),t._v(" "),v("th",[t._v("默认值")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("infinite")]),t._v(" "),v("td",[t._v("是否无限滚动模式")]),t._v(" "),v("td",[t._v("Boolean")]),t._v(" "),v("td",[t._v("-")]),t._v(" "),v("td",[t._v("false")])]),t._v(" "),v("tr",[v("td",[t._v("size")]),t._v(" "),v("td",[t._v("一次加载的数据量")]),t._v(" "),v("td",[t._v("Number")]),t._v(" "),v("td",[t._v("-")]),t._v(" "),v("td",[t._v("20")])]),t._v(" "),v("tr",[v("td",[t._v("offset")]),t._v(" "),v("td",[t._v("底部拉取更多数据的距离")]),t._v(" "),v("td",[t._v("Number")]),t._v(" "),v("td",[t._v("-")]),t._v(" "),v("td",[t._v("200")])]),t._v(" "),v("tr",[v("td",[t._v("onFetch")]),t._v(" "),v("td",[t._v("获取更多数据")]),t._v(" "),v("td",[t._v("Function")]),t._v(" "),v("td",[t._v("必传")]),t._v(" "),v("td",[t._v("-")])])])])},function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("p",[v("code",[t._v("onFetch")]),t._v(" 函数必须返回一个 Promise，同时 Promise 的 resolve 函数的第一个参数必须是数组或者 "),v("code",[t._v("false")]),t._v("，如果是数组并且长度小于 size，那么组件会停止无限滚动，同理，如果是 "),v("code",[t._v("false")]),t._v("，也会停止。")])},function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("table",[v("thead",[v("tr",[v("th",[t._v("名字")]),t._v(" "),v("th",[t._v("说明")]),t._v(" "),v("th",[t._v("参数")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("tombstone")]),t._v(" "),v("td",[t._v("实现个性化 "),v("code",[t._v("tombstone")]),t._v(" 样式的作用域插槽")]),t._v(" "),v("td",[t._v("-")])]),t._v(" "),v("tr",[v("td",[t._v("item")]),t._v(" "),v("td",[t._v("列表某项的作用域插槽，通过此插槽实现想要的渲染视图")]),t._v(" "),v("td",[t._v("data: 调用方传入的数据项集合的某一项")])]),t._v(" "),v("tr",[v("td",[t._v("spinner")]),t._v(" "),v("td",[t._v("加载更多的提示文案的具名插槽")]),t._v(" "),v("td",[t._v("-")])]),t._v(" "),v("tr",[v("td",[t._v("noMore")]),t._v(" "),v("td",[t._v("无更多数据的提示文案的具名插槽")]),t._v(" "),v("td",[t._v("-")])])])])},function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("table",[v("thead",[v("tr",[v("th",[t._v("方法名")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("reset")]),t._v(" "),v("td",[t._v("清空列表全部内容，重置数据")])])])])}],!1,null,null,null);e.default=n.exports}}]);